========
Pyhon ML
========

Introduction
============


Terminology
===========

We chose to split all operations in modular Blocks, that will operate on Data objects.

Data class
===========
The data-class is used to communicate between blocks. The Data-class has an 'xs' attribute, containing the features for each instance, and an 'ys' attribute, containing the lables. These attributus are read-only. If you want to change them, you have to create a new Data-object. This is needed to prevent issues when using the same Data-class for multiple objects. 

Usually the 'ys' attribute is an label, encoded as an integer. So most blocks use a single output for each instance. For classifiers that only accept two classes, the OneVsOne Block can be used. For regression objects, multidimensional outputs are allowed.


Block class
===========

Training vs testing
===================
A Block can be run in train and test mode. During train-mode, it can use both 'xs' and 'ys' attributes, during testing only the 'xs' attribute should be used. An exception is for example the Loss class, which measures the performance on the test-data. 

Blocks
======

Group
-----
Distributes Data objects over multiple Blocks

Chain
-----
Creates a Block that is implemented as a chain of Blocks

Map
---
Applies different blocks to different Data objects

CV
--
Applies a block to multiple datasets, for example created using LOOCV or KFoldCV.

Select
------
Selects a specific data-object, associated with a given Loss-Block. Can be used for model-selection

Fuse
----
Combines several blocks, in order to perform fusion with another block.

One-vs-one
----------
Splits one dataset into multiple dataset

Special features
================
 * GraphViz output
 * Run on multiple computers using a special Map-Block
 * A trace is produced for each Data object
